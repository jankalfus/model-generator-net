using System;
using FluentAssertions;
using Kontent.Ai.ModelGenerator.Core.Common;
using Kontent.Ai.ModelGenerator.Core.Helpers;
using Xunit;

namespace Kontent.Ai.ModelGenerator.Tests.Helpers;

public class TextHelpersTests
{
    [Fact]
    public void GetValidPascalCaseIdentifierName_ThrowsAnExceptionForNullValue()
    {
        var getValidPascalCaseIdentifierNameCall = () => TextHelpers.GetValidPascalCaseIdentifierName(null);

        getValidPascalCaseIdentifierNameCall.Should().ThrowExactly<ArgumentNullException>();
    }

    [Theory]
    [InlineData("")]
    [InlineData("  ")]
    [InlineData("-")]
    [InlineData("$^123")]
    public void GetValidPascalCaseIdentifierName_ThrowsAnExceptionForInvalidInput(string name)
    {
        var getValidPascalCaseIdentifierNameCall = () => TextHelpers.GetValidPascalCaseIdentifierName(name);

        getValidPascalCaseIdentifierNameCall.Should().ThrowExactly<InvalidIdentifierException>();
    }

    [Theory]
    [InlineData("Simple name", "SimpleName")]
    [InlineData("Name with special chars & multiple    spaces.", "NameWithSpecialCharsMultipleSpaces")]
    [InlineData("EVERYTHING_IS_ -UPPERCASE", "EverythingIsUppercase")]
    [InlineData("date___time_field", "DateTimeField")]
    [InlineData("Multiline\r\nstring", "MultilineString")]
    [InlineData(" 1 2 3 Starts with space and numbers", "StartsWithSpaceAndNumbers")]
    [InlineData("ends with numbers 1 2 3", "EndsWithNumbers123")]
    public void GetValidPascalCaseIdentifierName(string name, string expected)
    {
        string result = TextHelpers.GetValidPascalCaseIdentifierName(name);

        result.Should().Be(expected);
    }

    [Theory]
    [InlineData(null)]
    [InlineData("")]
    [InlineData(" ")]
    public void GenerateCommentString_CustomCommentIsNullOrEmptyOrWhiteSpace_Throws(string customComment)
    {
        var generateCommentStringCall = () => TextHelpers.GenerateCommentString(customComment);

        generateCommentStringCall.Should().ThrowExactly<ArgumentNullException>();
    }

    [Fact]
    public void GenerateCommentString_Returns()
    {
        var customComment = "// custom comment";

        var expectedComment =
            @$"// <auto-generated>
// This code was generated by a kontent-generators-net tool
// (see https://github.com/kontent-ai/model-generator-net).
//
// custom comment
// </auto-generated>{Environment.NewLine}{Environment.NewLine}";

        var result = TextHelpers.GenerateCommentString(customComment);

        result.Should().Be(expectedComment);
    }

    [Theory]
    [InlineData(null)]
    [InlineData("")]
    [InlineData(" ")]
    public void GetEnumerableType_TypeNameIsNullOrWhitespace_Throws(string typeName)
    {
        var getEnumerableTypeCall = () => TextHelpers.GetEnumerableType(typeName);

        getEnumerableTypeCall.Should().ThrowExactly<ArgumentException>();
    }

    [Fact]
    public void GetEnumerableType_Returns()
    {
        var typeName = "Hero";

        var result = TextHelpers.GetEnumerableType(typeName);

        result.Should().Be("IEnumerable<Hero>");
    }
}
